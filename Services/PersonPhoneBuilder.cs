// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using PersonAPI.Entities;
using PersonAPI.Models;
using PersonAPI.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;

namespace PersonAPI.Services {
    
    
    public class PersonPhoneBuilder : IPersonPhoneBuilder {
        
        private IDbEntities _entities;
        
        private IMapper _mapper;
        
        private ILoggerManager _logger;
        
        public PersonPhoneBuilder(EntitiesContext context, IMapper mapper, ILoggerManager logger) {
            _entities = context;
            _mapper = mapper;
            _logger = logger;
        }
        
        private Expression<Func<PersonPhone, PersonPhoneModel>>  ProjectToModel {
            get {
                return entity => _mapper.Map<PersonPhoneModel>(entity);
            }
        }
        
        public IQueryable<PersonPhoneModel> GetPersonPhones() {
            return _entities.PersonPhones.Select(ProjectToModel);
        }
        
        public IList<ExpandoObject> GetDisplayModels(List<string> propNames) {
            var models = _entities.PersonPhones.Select(ProjectToModel);

            var displayModels = new List<ExpandoObject>();
            foreach (var model in models)
            {
                dynamic displayModel = DynamicHelper.ConvertToExpando(model, propNames);
                displayModels.Add(displayModel);
            }

            return displayModels;
        }
        
        public async Task<BuilderResponse> GetPersonPhone_ByBusinessEntityIDPhoneNumberPhoneNumberTypeID(int businessEntityID, string phoneNumber, int phoneNumberTypeID) {
          var query = await Search(_entities.PersonPhones, x => x.BusinessEntityID == businessEntityID&& x.PhoneNumber == phoneNumber&& x.PhoneNumberTypeID == phoneNumberTypeID).Select(ProjectToModel)?.ToListAsync();
            if (query.Any()) {
              return new BuilderResponse{ Model = query.Single() }; 
            }
            else {
           return new BuilderResponse { RequestMessage = $"Record Not Found; PersonPhone with businessEntityID, phoneNumber, phoneNumberTypeID = '{businessEntityID}', '{phoneNumber}', '{phoneNumberTypeID}' doesn't exist." }; 
            }
        }
        
        public IQueryable<PersonPhoneModel> GetPersonPhone_ByBusinessEntityID(int businessEntityID) {

          var query = Search(_entities.PersonPhones, x => x.BusinessEntityID == businessEntityID).Select(ProjectToModel);

            return query;
        }
        
        public IQueryable<PersonPhoneModel> GetPersonPhone_ByPhoneNumberTypeID(int phoneNumberTypeID) {

          var query = Search(_entities.PersonPhones, x => x.PhoneNumberTypeID == phoneNumberTypeID).Select(ProjectToModel);

            return query;
        }
        
        public async Task<BuilderResponse> AddPersonPhone(PersonPhoneModel model) {
            var matchBusinessEntityID = _entities.People.Where(x => x.BusinessEntityID.Equals(model.BusinessEntityID));
            if (!matchBusinessEntityID.Any()) {
              return new BuilderResponse { RequestMessage = $"Foreign Key Violation; " + nameof(model.BusinessEntityID) + " '{model.BusinessEntityID}' doesn't exist in the system."}; 
            }

            var matchPhoneNumberTypeID = _entities.PhoneNumberTypes.Where(x => x.PhoneNumberTypeID.Equals(model.PhoneNumberTypeID));
            if (!matchPhoneNumberTypeID.Any()) {
              return new BuilderResponse { RequestMessage = $"Foreign Key Violation; " + nameof(model.PhoneNumberTypeID) + " '{model.PhoneNumberTypeID}' doesn't exist in the system."}; 
            }

           try
           {
                 var entity = _mapper.Map<PersonPhone>(model);
                _entities.PersonPhones.Add(entity);
               await _entities.SaveChangesAsync();
                _logger.LogInfo(string.Format("PersonPhone added with values: '{0}'", JsonConvert.SerializeObject(model)));
               return new BuilderResponse{ Model = new PersonPhoneModel(entity) }; 
            }
            catch (DbUpdateException ue)
            {
                if(ue.InnerException != null && ue.InnerException.Message.Contains("Cannot insert explicit value for identity column"))
                {
                    var inner = ue.InnerException;
                    _logger.LogError(inner.Message + Environment.NewLine + JsonConvert.SerializeObject(model) + Environment.NewLine + inner.StackTrace);
                    return new BuilderResponse { ErrorMessage = "IDENTITY_INSERT is set to OFF; Cannot insert explicit value for identity column when IDENTITY_INSERT is set to OFF."};
                }
                else if(ue.InnerException != null && ue.InnerException.Message.Contains("Cannot insert duplicate key row"))
                {
                    var inner = ue.InnerException;
                    _logger.LogError(inner.Message + Environment.NewLine + JsonConvert.SerializeObject(model) + Environment.NewLine + inner.StackTrace);
                    return new BuilderResponse { ErrorMessage = "Duplicate exception; Please verify that an item with these values doesn't already exists."};
                }
                _logger.LogError(ue.Message + ue.StackTrace);
                return new BuilderResponse { ErrorMessage = ue.Message };
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message + e.StackTrace);
                return new BuilderResponse { ErrorMessage = e.Message};
            }
        }
        
        public async Task<BuilderResponse> UpdatePersonPhone(PersonPhoneModel model) {

          var query = Search(_entities.PersonPhones, x =>  x.BusinessEntityID == model.BusinessEntityID && x.PhoneNumber == model.PhoneNumber && x.PhoneNumberTypeID == model.PhoneNumberTypeID);
            if (!query.Any()) {
              return new BuilderResponse { RequestMessage = "Record Not Found; " + string.Format("PersonPhone with _businessEntityID, _phoneNumber, _phoneNumberTypeID = '{0}', '{1}', '{2}' doesn't exist.",model.BusinessEntityID, model.PhoneNumber, model.PhoneNumberTypeID)}; 
            }
            var matchBusinessEntityID = _entities.People.Where(x => x.BusinessEntityID.Equals(model.BusinessEntityID));
            if (!matchBusinessEntityID.Any()) {
              return new BuilderResponse { RequestMessage = "Foreign Key Violation; " + nameof(model.BusinessEntityID) + string.Format("BusinessEntityID = '{0}' doesn't exist in the system.", model.BusinessEntityID)}; 
            }

            var matchPhoneNumberTypeID = _entities.PhoneNumberTypes.Where(x => x.PhoneNumberTypeID.Equals(model.PhoneNumberTypeID));
            if (!matchPhoneNumberTypeID.Any()) {
              return new BuilderResponse { RequestMessage = "Foreign Key Violation; " + nameof(model.PhoneNumberTypeID) + string.Format("PhoneNumberTypeID = '{0}' doesn't exist in the system.", model.PhoneNumberTypeID)}; 
            }

           try
           {
            PersonPhone entity = query.SingleOrDefault();
             entity = model.ToEntity(entity);
               await _entities.SaveChangesAsync();
                _logger.LogInfo(string.Format("PersonPhone update with values: '{0}'", JsonConvert.SerializeObject(model)));
               return new BuilderResponse{ StatusCode = (int)HttpStatusCode.Created }; 
            }
            catch (DbUpdateException ue)
            {
                if(ue.InnerException != null && ue.InnerException.Message.Contains("Cannot insert duplicate key row"))
                {
                    var inner = ue.InnerException;
                    _logger.LogError(inner.Message + Environment.NewLine + JsonConvert.SerializeObject(model) + Environment.NewLine + inner.StackTrace);
                    return new BuilderResponse { ErrorMessage = "Duplicate exception; Please verify that an item with these values doesn't already exists."};
                }
                _logger.LogError(ue.Message + ue.StackTrace);
                return new BuilderResponse { ErrorMessage = ue.Message };
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message + e.StackTrace);
                return new BuilderResponse { ErrorMessage = e.Message};
            }
        }
        
        public async Task<BuilderResponse> DeletePersonPhone(int businessEntityID, string phoneNumber, int phoneNumberTypeID) {
          var query = Search(_entities.PersonPhones, x => x.BusinessEntityID == businessEntityID&& x.PhoneNumber == phoneNumber&& x.PhoneNumberTypeID == phoneNumberTypeID);
            if (!query.Any()) {
              return new BuilderResponse { RequestMessage = "Record Not Found; " + string.Format("PersonPhone with _businessEntityID, _phoneNumber, _phoneNumberTypeID = '{0}', '{1}', '{2}' doesn't exist.",businessEntityID, phoneNumber, phoneNumberTypeID)}; 
            }
            var entity = query.SingleOrDefault();

           try
           {
                _entities.PersonPhones.Remove(entity);
               await _entities.SaveChangesAsync();
            _logger.LogInfo(string.Format("PersonPhone deleted with values: '{0}'", JsonConvert.SerializeObject(new PersonPhoneModel(entity))));
               return new BuilderResponse{ StatusCode = (int)HttpStatusCode.NoContent }; 
            }
            catch (DbUpdateException ue)
            {
                if(ue.InnerException != null && ue.InnerException.Message.Contains("The DELETE statement conflicted with the REFERENCE constraint"))
                {
                    var inner = ue.InnerException;
                    _logger.LogError(inner.Message + inner.StackTrace);
                    return new BuilderResponse { ErrorMessage = "Please delete related items first."};
                }
                _logger.LogError(ue.Message + ue.StackTrace);
                return new BuilderResponse { ErrorMessage = ue.Message };
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message + e.StackTrace);
                return new BuilderResponse { ErrorMessage = e.Message};
            }
        }
        
        private IQueryable<PersonPhone> Search(IQueryable<PersonPhone> query, Expression<Func<PersonPhone, bool>> filter) {
            return query.Where(filter);
        }
    }
}

